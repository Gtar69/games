1.  simple backend
 ✔ Administrator can upload games(products) at the backend websites. @done (14-09-15 18:08)
 ✔ A product should have it's own title, description. @done (14-09-16 10:09)
 ✔ A product has it's own pictures. (phtoto model) @done (14-09-16 14:59)
 ✔ log-in system can distinguish users as administrator and general users.  (admin/products) @done (14-09-15 18:08)
 ✔ The backend website only can be accessed by administrator. @done (14-09-16 14:05)
 ✔ products/new    @done (14-09-16 14:20)
 ✔ products/index  @done (14-09-16 14:20)
 ☐ products/show
 ✔ implementation of bootstrap navbar for log-in system @done (14-09-16 14:21)

2. simple front-end
 ✔ Users can see all games in the website. @done (14-09-16 17:17)
 ☐ Each game picture represents "specific entry for a game". (product/show)

3. aethestic concern
 ✔ bootstrap navbar for login/out @done (14-09-16 17:23)
 ✔ Administrator has his own panel directed to "admin/products" @done (14-09-16 17:22)

4. Backend improvements
 ✔  form_for / simple_form  @done (14-09-22 14:19)
 ✔  products/edit @done (14-09-22 15:13)
 ✔  products/destroy @done (14-09-22 15:21)
 ✔  some notice function implementation @done (14-09-22 16:04)
 ☐  products/show
 ☐  multiple photos uploading for one game?
 ☐  Twitter log in/out

5. Simulation of "server node" request to "server node mgmt server"(14-09-23)
 ☐  Server node "submit a request" which stands for server status to mgmt server. (need another rails application)
       ☐
       ☐
 ☐  Mgmt server receive the request and update status of Server node.
       ✔ Administrator can set up servernode at mgnt server. @done (14-09-23 13:49)
       ✔ servernode/new @done (14-09-23 13:49)
       ✔ A servernode have it's own "name" and "status" @done (14-09-23 13:49)
       ✔ "status" includes available, occupied and dump. @done (14-09-23 13:49)
       ✔ servernode/index @done (14-09-23 13:49)

6. to be continued...
 ☐ deploy to AWS EC2
 ☐

