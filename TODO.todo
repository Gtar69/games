1.  simple backend
 ✔ Administrator can upload games(products) at the backend websites. @done (14-09-15 18:08)
 ✔ A product should have it's own title, description. @done (14-09-16 10:09)
 ✔ A product has it's own pictures. (phtoto model) @done (14-09-16 14:59)
 ✔ log-in system can distinguish users as administrator and general users.  (admin/products) @done (14-09-15 18:08)
 ✔ The backend website only can be accessed by administrator. @done (14-09-16 14:05)
 ✔ products/new    @done (14-09-16 14:20)
 ✔ products/index  @done (14-09-16 14:20)
 ☐ products/show
 ✔ implementation of bootstrap navbar for log-in system @done (14-09-16 14:21)

2. simple front-end
 ✔ Users can see all games in the website. @done (14-09-16 17:17)

3. aethestic concern
 ✔ bootstrap navbar for login/out @done (14-09-16 17:23)
 ✔ Administrator has his own panel directed to "admin/products" @done (14-09-16 17:22)

4. Backend improvements
 ✔  form_for / simple_form  @done (14-09-22 14:19)
 ✔  products/edit @done (14-09-22 15:13)
 ✔  products/destroy @done (14-09-22 15:21)
 ✔  some notice function implementation @done (14-09-22 16:04)


5. Simulation of "server node" request to "server node mgmt server"(14-09-23)
 ☐  Server node "submit a request" which stands for server status to mgmt server. (need another rails application)
       ✔ build another rails project simulate "Android Server Node" @done (14-09-24 18:14)

 ☐  Mgmt server receive the request and update status of Server node.
       ✔ Administrator can set up servernode at mgnt server. @done (14-09-23 13:49)
       ✔ servernode/new @done (14-09-23 13:49)
       ✔ A servernode have it's own "name" and "status" @done (14-09-23 13:49)
       ✔ "status" includes available, occupied and dump. @done (14-09-23 13:49)
       ✔ servernode/index @done (14-09-23 13:49)
       ✔ servernode/edit @done (14-09-23 14:26)

6.  new spec
 ✔ Each game represents "specific entry for a game". (products/show) @done (14-09-25 12:38)
 ✔ products/:id  have a entry for playing the game @done (14-09-25 12:38)
 ✔ When user press "Play Game Now" button, mgmt server will dispatch "random one available node sever" to user. @done (14-09-25 14:59)
      ✔ look up all servernodes to find one of available nodes randomly  @done (14-09-25 14:29)
      ✔ The assigned node server status transist from "Available" to "Ready." @done (14-09-25 14:29)
 ✔ only registered and log-in user can play the game @done (14-09-25 15:57)

7. API implenmentation
 ✔ Now, we don't want to create/update servernode "on both sides". In that way,  in Mgmt server, it will ask Android Node for server name, status and ip by Ajax request behind the scence instead of direct http call. @done (14-10-06 11:54)
 ✔ products/play_game modification: for particular user, it means we have to hold stat "ready" @done (14-10-06 11:54)

8. extras
 ✔ Using Mysql instead of sqlite @done (14-10-09 14:51)

9. current cast streaming server has ability to save the game locally after the player finished playing a game. We don't want to save it locally, we want to save it to database server

10. need to establish a game id, name, application path, ..etc. database table during the game onboarding process.
 ✔ Using many to many relationship between game and user through "game_data" model @done (14-11-05 13:37)
 ☐ game_data should have one zip file which represented for current progress of player in the game
 ☐
 ☐ game information included id, name, and saved_data should pass to Andorid node during the game onboarding process
 ☐ If a user play game first, the zip file will be ??

201. SSL certificate
 ☐ Andorid node server should have an SSL certifcate with Mgmt server to update "current status" of node server. (need to identify via http or websocket)
